<?php
/**
 * ErrorErrors
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vouchery API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vouchery\Model;

use \ArrayAccess;
use \Vouchery\ObjectSerializer;

/**
 * ErrorErrors Class Doc Comment
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ErrorErrors implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Error_errors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attribute' => 'string',
        'code' => 'string',
        'message' => 'string',
        'boundary_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'attribute' => null,
        'code' => null,
        'message' => null,
        'boundary_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute' => 'attribute',
        'code' => 'code',
        'message' => 'message',
        'boundary_value' => 'boundary_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute' => 'setAttribute',
        'code' => 'setCode',
        'message' => 'setMessage',
        'boundary_value' => 'setBoundaryValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute' => 'getAttribute',
        'code' => 'getCode',
        'message' => 'getMessage',
        'boundary_value' => 'getBoundaryValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CODE_REQUIRED = 'required';
    const CODE_BELOW_MINIMUM = 'below_minimum';
    const CODE_ABOVE_MAXIMUM = 'above_maximum';
    const CODE_UNEXPECTED_VALUE = 'unexpected_value';
    const CODE_MUST_BE_UNIQUE = 'must_be_unique';
    const CODE_SHOULD_MATCH_CONFIRMATION = 'should_match_confirmation';
    const CODE_MUST_BE_ACCEPTED = 'must_be_accepted';
    const CODE_MUST_BE_NULL = 'must_be_null';
    const CODE_TOO_SHORT = 'too_short';
    const CODE_TOO_LONG = 'too_long';
    const CODE_WRONG_LENGTH = 'wrong_length';
    const CODE_INVALID = 'invalid';
    const CODE_INVALID_DATE = 'invalid_date';
    const CODE_INVALID_TIME = 'invalid_time';
    const CODE_INVALID_DATETIME = 'invalid_datetime';
    const CODE_NOT_ALLOWED_TO_HAVE_VOUCHERS = 'not_allowed_to_have_vouchers';
    const CODE_ALREADY_CONFIRMED = 'already_confirmed';
    const CODE_EXPIRED = 'expired';
    const CODE_MISSING_REQUIRED_TAGS = 'missing_required_tags';
    const CODE_INCLUDES_FORBIDDEN_TAGS = 'includes_forbidden_tags';
    const CODE_MISSING_REQUIRED_CATEGORY = 'missing_required_category';
    const CODE_OUTSIDE_OF_PERMITTED_AREAS = 'outside_of_permitted_areas';
    const CODE_NOT_VALID_AT_THIS_TIME = 'not_valid_at_this_time';
    const CODE_NOT_ACTIVE = 'not_active';
    const CODE_MAXIMUM_REDEMPTIONS_EXCEEDED = 'maximum_redemptions_exceeded';
    const CODE_BUDGET_EXCEEDED = 'budget_exceeded';
    const CODE_NEW_CUSTOMER_REQUIRED = 'new_customer_required';
    const CODE_PER_CUSTOMER_LIMIT_EXCEEDED = 'per_customer_limit_exceeded';
    const CODE_TIME_LIMIT_EXPIRED = 'time_limit_expired';
    const CODE_REDEMPTIONS_LIMIT_EXCEEDED = 'redemptions_limit_exceeded';
    const CODE_BELOW_CAMPAIGN_MINIMUM = 'below_campaign_minimum';
    const CODE_ABOVE_CAMPAIGN_MAXIMUM = 'above_campaign_maximum';
    const CODE_UNKNOWN_TAGS = 'unknown_tags';
    const CODE_DOES_NOT_MATCH_ASSIGNED_CUSTOMER = 'does_not_match_assigned_customer';
    const CODE_UNIQUE_CODE_ALREADY_USED = 'unique_code_already_used';
    const CODE_NOT_MATCH = 'not_match';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_REQUIRED,
            self::CODE_BELOW_MINIMUM,
            self::CODE_ABOVE_MAXIMUM,
            self::CODE_UNEXPECTED_VALUE,
            self::CODE_MUST_BE_UNIQUE,
            self::CODE_SHOULD_MATCH_CONFIRMATION,
            self::CODE_MUST_BE_ACCEPTED,
            self::CODE_MUST_BE_NULL,
            self::CODE_TOO_SHORT,
            self::CODE_TOO_LONG,
            self::CODE_WRONG_LENGTH,
            self::CODE_INVALID,
            self::CODE_INVALID_DATE,
            self::CODE_INVALID_TIME,
            self::CODE_INVALID_DATETIME,
            self::CODE_NOT_ALLOWED_TO_HAVE_VOUCHERS,
            self::CODE_ALREADY_CONFIRMED,
            self::CODE_EXPIRED,
            self::CODE_MISSING_REQUIRED_TAGS,
            self::CODE_INCLUDES_FORBIDDEN_TAGS,
            self::CODE_MISSING_REQUIRED_CATEGORY,
            self::CODE_OUTSIDE_OF_PERMITTED_AREAS,
            self::CODE_NOT_VALID_AT_THIS_TIME,
            self::CODE_NOT_ACTIVE,
            self::CODE_MAXIMUM_REDEMPTIONS_EXCEEDED,
            self::CODE_BUDGET_EXCEEDED,
            self::CODE_NEW_CUSTOMER_REQUIRED,
            self::CODE_PER_CUSTOMER_LIMIT_EXCEEDED,
            self::CODE_TIME_LIMIT_EXPIRED,
            self::CODE_REDEMPTIONS_LIMIT_EXCEEDED,
            self::CODE_BELOW_CAMPAIGN_MINIMUM,
            self::CODE_ABOVE_CAMPAIGN_MAXIMUM,
            self::CODE_UNKNOWN_TAGS,
            self::CODE_DOES_NOT_MATCH_ASSIGNED_CUSTOMER,
            self::CODE_UNIQUE_CODE_ALREADY_USED,
            self::CODE_NOT_MATCH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute'] = isset($data['attribute']) ? $data['attribute'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['boundary_value'] = isset($data['boundary_value']) ? $data['boundary_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute
     *
     * @return string|null
     */
    public function getAttribute()
    {
        return $this->container['attribute'];
    }

    /**
     * Sets attribute
     *
     * @param string|null $attribute Attribute name
     *
     * @return $this
     */
    public function setAttribute($attribute)
    {
        $this->container['attribute'] = $attribute;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Machine-readable API error code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Human-readable error message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets boundary_value
     *
     * @return string|null
     */
    public function getBoundaryValue()
    {
        return $this->container['boundary_value'];
    }

    /**
     * Sets boundary_value
     *
     * @param string|null $boundary_value Minimum, maximum, or expected value for this attribute
     *
     * @return $this
     */
    public function setBoundaryValue($boundary_value)
    {
        $this->container['boundary_value'] = $boundary_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


