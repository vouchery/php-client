<?php
/**
 * Redemption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vouchery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vouchery\Model;

use \ArrayAccess;
use \Vouchery\ObjectSerializer;

/**
 * Redemption Class Doc Comment
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Redemption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Redemption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'transaction_id' => 'string',
        'customer_identifier' => 'string',
        'total_transaction_cost' => 'float',
        'ttl' => 'float',
        'granted_discount' => 'float',
        'user_agent' => 'string',
        'voucher' => '\Vouchery\Model\RedemptionVoucher',
        'confirmed' => 'bool',
        'product_items' => '\Vouchery\Model\RedemptionProductItems[]',
        'validated_at' => '\DateTime',
        'expires_at' => '\DateTime',
        'confirmed_at' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'transaction_id' => null,
        'customer_identifier' => null,
        'total_transaction_cost' => null,
        'ttl' => null,
        'granted_discount' => null,
        'user_agent' => null,
        'voucher' => null,
        'confirmed' => null,
        'product_items' => null,
        'validated_at' => 'date-time',
        'expires_at' => 'date-time',
        'confirmed_at' => 'date-time',
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'transaction_id' => 'transaction_id',
        'customer_identifier' => 'customer_identifier',
        'total_transaction_cost' => 'total_transaction_cost',
        'ttl' => 'ttl',
        'granted_discount' => 'granted_discount',
        'user_agent' => 'user_agent',
        'voucher' => 'voucher',
        'confirmed' => 'confirmed',
        'product_items' => 'product_items',
        'validated_at' => 'validated_at',
        'expires_at' => 'expires_at',
        'confirmed_at' => 'confirmed_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'transaction_id' => 'setTransactionId',
        'customer_identifier' => 'setCustomerIdentifier',
        'total_transaction_cost' => 'setTotalTransactionCost',
        'ttl' => 'setTtl',
        'granted_discount' => 'setGrantedDiscount',
        'user_agent' => 'setUserAgent',
        'voucher' => 'setVoucher',
        'confirmed' => 'setConfirmed',
        'product_items' => 'setProductItems',
        'validated_at' => 'setValidatedAt',
        'expires_at' => 'setExpiresAt',
        'confirmed_at' => 'setConfirmedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'transaction_id' => 'getTransactionId',
        'customer_identifier' => 'getCustomerIdentifier',
        'total_transaction_cost' => 'getTotalTransactionCost',
        'ttl' => 'getTtl',
        'granted_discount' => 'getGrantedDiscount',
        'user_agent' => 'getUserAgent',
        'voucher' => 'getVoucher',
        'confirmed' => 'getConfirmed',
        'product_items' => 'getProductItems',
        'validated_at' => 'getValidatedAt',
        'expires_at' => 'getExpiresAt',
        'confirmed_at' => 'getConfirmedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_REDEMPTION = 'Redemption';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REDEMPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['customer_identifier'] = isset($data['customer_identifier']) ? $data['customer_identifier'] : null;
        $this->container['total_transaction_cost'] = isset($data['total_transaction_cost']) ? $data['total_transaction_cost'] : null;
        $this->container['ttl'] = isset($data['ttl']) ? $data['ttl'] : null;
        $this->container['granted_discount'] = isset($data['granted_discount']) ? $data['granted_discount'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['voucher'] = isset($data['voucher']) ? $data['voucher'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['product_items'] = isset($data['product_items']) ? $data['product_items'] : null;
        $this->container['validated_at'] = isset($data['validated_at']) ? $data['validated_at'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['confirmed_at'] = isset($data['confirmed_at']) ? $data['confirmed_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['total_transaction_cost'] === null) {
            $invalidProperties[] = "'total_transaction_cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Unique transaction ID which identifies underlying transaction in your system, e.g. order number, invoice number
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets customer_identifier
     *
     * @return string|null
     */
    public function getCustomerIdentifier()
    {
        return $this->container['customer_identifier'];
    }

    /**
     * Sets customer_identifier
     *
     * @param string|null $customer_identifier A string uniquely identifying customer in your system. Please check customers API.
     *
     * @return $this
     */
    public function setCustomerIdentifier($customer_identifier)
    {
        $this->container['customer_identifier'] = $customer_identifier;

        return $this;
    }

    /**
     * Gets total_transaction_cost
     *
     * @return float
     */
    public function getTotalTransactionCost()
    {
        return $this->container['total_transaction_cost'];
    }

    /**
     * Sets total_transaction_cost
     *
     * @param float $total_transaction_cost total_transaction_cost
     *
     * @return $this
     */
    public function setTotalTransactionCost($total_transaction_cost)
    {
        $this->container['total_transaction_cost'] = $total_transaction_cost;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return float|null
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param float|null $ttl How many minutes should the redemption be valid for before it expires.
     *
     * @return $this
     */
    public function setTtl($ttl)
    {
        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets granted_discount
     *
     * @return float|null
     */
    public function getGrantedDiscount()
    {
        return $this->container['granted_discount'];
    }

    /**
     * Sets granted_discount
     *
     * @param float|null $granted_discount granted_discount
     *
     * @return $this
     */
    public function setGrantedDiscount($granted_discount)
    {
        $this->container['granted_discount'] = $granted_discount;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \Vouchery\Model\RedemptionVoucher|null
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \Vouchery\Model\RedemptionVoucher|null $voucher voucher
     *
     * @return $this
     */
    public function setVoucher($voucher)
    {
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool|null
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool|null $confirmed Only confirmed redemption are counted towards budget and total number of redemptions.
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets product_items
     *
     * @return \Vouchery\Model\RedemptionProductItems[]|null
     */
    public function getProductItems()
    {
        return $this->container['product_items'];
    }

    /**
     * Sets product_items
     *
     * @param \Vouchery\Model\RedemptionProductItems[]|null $product_items Array of product items, associated with a redemption
     *
     * @return $this
     */
    public function setProductItems($product_items)
    {
        $this->container['product_items'] = $product_items;

        return $this;
    }

    /**
     * Gets validated_at
     *
     * @return \DateTime|null
     */
    public function getValidatedAt()
    {
        return $this->container['validated_at'];
    }

    /**
     * Sets validated_at
     *
     * @param \DateTime|null $validated_at validated_at
     *
     * @return $this
     */
    public function setValidatedAt($validated_at)
    {
        $this->container['validated_at'] = $validated_at;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime|null
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime|null $confirmed_at confirmed_at
     *
     * @return $this
     */
    public function setConfirmedAt($confirmed_at)
    {
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


