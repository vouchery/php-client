<?php
/**
 * Campaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vouchery API Reference
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vouchery\Model;

use \ArrayAccess;
use \Vouchery\ObjectSerializer;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Campaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'int',
        'parent_id' => 'int',
        'status' => 'string',
        'name' => 'string',
        'triggers_on' => 'string',
        'trigger_name' => 'string',
        'template' => 'string',
        'description' => 'string',
        'customer_information' => 'string',
        'max_total_budget' => 'float',
        'max_redemptions' => 'float',
        'minimum_value' => 'float',
        'maximum_value' => 'float',
        'currency' => 'string',
        'currency_symbol' => 'string',
        'team' => 'string',
        'channel' => 'string',
        'purpose' => 'string',
        'budget_code' => 'string',
        'medium' => 'string',
        'voucher_type' => 'string',
        'voucher_code_type' => 'string',
        'voucher_random_part_length' => 'float',
        'voucher_prefix' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => null,
        'parent_id' => null,
        'status' => null,
        'name' => null,
        'triggers_on' => null,
        'trigger_name' => null,
        'template' => null,
        'description' => null,
        'customer_information' => null,
        'max_total_budget' => null,
        'max_redemptions' => null,
        'minimum_value' => null,
        'maximum_value' => null,
        'currency' => null,
        'currency_symbol' => null,
        'team' => null,
        'channel' => null,
        'purpose' => null,
        'budget_code' => null,
        'medium' => null,
        'voucher_type' => null,
        'voucher_code_type' => null,
        'voucher_random_part_length' => null,
        'voucher_prefix' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'parent_id' => 'parent_id',
        'status' => 'status',
        'name' => 'name',
        'triggers_on' => 'triggers_on',
        'trigger_name' => 'trigger_name',
        'template' => 'template',
        'description' => 'description',
        'customer_information' => 'customer_information',
        'max_total_budget' => 'max_total_budget',
        'max_redemptions' => 'max_redemptions',
        'minimum_value' => 'minimum_value',
        'maximum_value' => 'maximum_value',
        'currency' => 'currency',
        'currency_symbol' => 'currency_symbol',
        'team' => 'team',
        'channel' => 'channel',
        'purpose' => 'purpose',
        'budget_code' => 'budget_code',
        'medium' => 'medium',
        'voucher_type' => 'voucher_type',
        'voucher_code_type' => 'voucher_code_type',
        'voucher_random_part_length' => 'voucher_random_part_length',
        'voucher_prefix' => 'voucher_prefix',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'status' => 'setStatus',
        'name' => 'setName',
        'triggers_on' => 'setTriggersOn',
        'trigger_name' => 'setTriggerName',
        'template' => 'setTemplate',
        'description' => 'setDescription',
        'customer_information' => 'setCustomerInformation',
        'max_total_budget' => 'setMaxTotalBudget',
        'max_redemptions' => 'setMaxRedemptions',
        'minimum_value' => 'setMinimumValue',
        'maximum_value' => 'setMaximumValue',
        'currency' => 'setCurrency',
        'currency_symbol' => 'setCurrencySymbol',
        'team' => 'setTeam',
        'channel' => 'setChannel',
        'purpose' => 'setPurpose',
        'budget_code' => 'setBudgetCode',
        'medium' => 'setMedium',
        'voucher_type' => 'setVoucherType',
        'voucher_code_type' => 'setVoucherCodeType',
        'voucher_random_part_length' => 'setVoucherRandomPartLength',
        'voucher_prefix' => 'setVoucherPrefix',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'status' => 'getStatus',
        'name' => 'getName',
        'triggers_on' => 'getTriggersOn',
        'trigger_name' => 'getTriggerName',
        'template' => 'getTemplate',
        'description' => 'getDescription',
        'customer_information' => 'getCustomerInformation',
        'max_total_budget' => 'getMaxTotalBudget',
        'max_redemptions' => 'getMaxRedemptions',
        'minimum_value' => 'getMinimumValue',
        'maximum_value' => 'getMaximumValue',
        'currency' => 'getCurrency',
        'currency_symbol' => 'getCurrencySymbol',
        'team' => 'getTeam',
        'channel' => 'getChannel',
        'purpose' => 'getPurpose',
        'budget_code' => 'getBudgetCode',
        'medium' => 'getMedium',
        'voucher_type' => 'getVoucherType',
        'voucher_code_type' => 'getVoucherCodeType',
        'voucher_random_part_length' => 'getVoucherRandomPartLength',
        'voucher_prefix' => 'getVoucherPrefix',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_MAIN_CAMPAIGN = 'MainCampaign';
    const TYPE_SUB_CAMPAIGN = 'SubCampaign';
    const STATUS_DRAFT = 'draft';
    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_ARCHIVED = 'archived';
    const TRIGGERS_ON_CUSTOMER_POINTS_CHANGE = 'customer_points_change';
    const TRIGGERS_ON_REDEMPTION = 'redemption';
    const TRIGGERS_ON_CUSTOM = 'custom';
    const TEMPLATE_DISCOUNT = 'discount';
    const TEMPLATE_LOYALTY = 'loyalty';
    const TEMPLATE_GIFT_CARD = 'gift_card';
    const TEMPLATE_SUB_REDEMPTION = 'sub_redemption';
    const TEMPLATE_SUB_REWARD_POINTS = 'sub_reward_points';
    const TEMPLATE_SUB_GENERATE_VOUCHERS = 'sub_generate_vouchers';
    const VOUCHER_TYPE_UNIQUE = 'unique';
    const VOUCHER_TYPE_GENERIC = 'generic';
    const VOUCHER_CODE_TYPE_DIGITS = 'digits';
    const VOUCHER_CODE_TYPE_LETTERS = 'letters';
    const VOUCHER_CODE_TYPE_MIXED = 'mixed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MAIN_CAMPAIGN,
            self::TYPE_SUB_CAMPAIGN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_ARCHIVED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggersOnAllowableValues()
    {
        return [
            self::TRIGGERS_ON_CUSTOMER_POINTS_CHANGE,
            self::TRIGGERS_ON_REDEMPTION,
            self::TRIGGERS_ON_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateAllowableValues()
    {
        return [
            self::TEMPLATE_DISCOUNT,
            self::TEMPLATE_LOYALTY,
            self::TEMPLATE_GIFT_CARD,
            self::TEMPLATE_SUB_REDEMPTION,
            self::TEMPLATE_SUB_REWARD_POINTS,
            self::TEMPLATE_SUB_GENERATE_VOUCHERS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherTypeAllowableValues()
    {
        return [
            self::VOUCHER_TYPE_UNIQUE,
            self::VOUCHER_TYPE_GENERIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherCodeTypeAllowableValues()
    {
        return [
            self::VOUCHER_CODE_TYPE_DIGITS,
            self::VOUCHER_CODE_TYPE_LETTERS,
            self::VOUCHER_CODE_TYPE_MIXED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['triggers_on'] = isset($data['triggers_on']) ? $data['triggers_on'] : null;
        $this->container['trigger_name'] = isset($data['trigger_name']) ? $data['trigger_name'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['customer_information'] = isset($data['customer_information']) ? $data['customer_information'] : null;
        $this->container['max_total_budget'] = isset($data['max_total_budget']) ? $data['max_total_budget'] : null;
        $this->container['max_redemptions'] = isset($data['max_redemptions']) ? $data['max_redemptions'] : null;
        $this->container['minimum_value'] = isset($data['minimum_value']) ? $data['minimum_value'] : null;
        $this->container['maximum_value'] = isset($data['maximum_value']) ? $data['maximum_value'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['currency_symbol'] = isset($data['currency_symbol']) ? $data['currency_symbol'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['budget_code'] = isset($data['budget_code']) ? $data['budget_code'] : null;
        $this->container['medium'] = isset($data['medium']) ? $data['medium'] : null;
        $this->container['voucher_type'] = isset($data['voucher_type']) ? $data['voucher_type'] : null;
        $this->container['voucher_code_type'] = isset($data['voucher_code_type']) ? $data['voucher_code_type'] : null;
        $this->container['voucher_random_part_length'] = isset($data['voucher_random_part_length']) ? $data['voucher_random_part_length'] : null;
        $this->container['voucher_prefix'] = isset($data['voucher_prefix']) ? $data['voucher_prefix'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getTriggersOnAllowableValues();
        if (!is_null($this->container['triggers_on']) && !in_array($this->container['triggers_on'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'triggers_on', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTemplateAllowableValues();
        if (!is_null($this->container['template']) && !in_array($this->container['template'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($this->container['voucher_type']) && !in_array($this->container['voucher_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherCodeTypeAllowableValues();
        if (!is_null($this->container['voucher_code_type']) && !in_array($this->container['voucher_code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['voucher_random_part_length']) && ($this->container['voucher_random_part_length'] > 10)) {
            $invalidProperties[] = "invalid value for 'voucher_random_part_length', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['voucher_random_part_length']) && ($this->container['voucher_random_part_length'] < 3)) {
            $invalidProperties[] = "invalid value for 'voucher_random_part_length', must be bigger than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type This field is required only when you create a campaign. Main Campaign is a wrapper for multipe Sub Campaings, grouped together. Main Campaign can have own budget and redemptions limit.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Required only for subcampaigns.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the campaign must be unique.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets triggers_on
     *
     * @return string|null
     */
    public function getTriggersOn()
    {
        return $this->container['triggers_on'];
    }

    /**
     * Sets triggers_on
     *
     * @param string|null $triggers_on What type of trigger sub campaign is reacting on to check rules and give rewards.
     *
     * @return $this
     */
    public function setTriggersOn($triggers_on)
    {
        $allowedValues = $this->getTriggersOnAllowableValues();
        if (!is_null($triggers_on) && !in_array($triggers_on, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'triggers_on', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['triggers_on'] = $triggers_on;

        return $this;
    }

    /**
     * Gets trigger_name
     *
     * @return string|null
     */
    public function getTriggerName()
    {
        return $this->container['trigger_name'];
    }

    /**
     * Sets trigger_name
     *
     * @param string|null $trigger_name If campaign is triggered by custom trigger, it's name should be specified.
     *
     * @return $this
     */
    public function setTriggerName($trigger_name)
    {
        $this->container['trigger_name'] = $trigger_name;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template Determines campaign business type & structure to setup
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $allowedValues = $this->getTemplateAllowableValues();
        if (!is_null($template) && !in_array($template, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customer_information
     *
     * @return string|null
     */
    public function getCustomerInformation()
    {
        return $this->container['customer_information'];
    }

    /**
     * Sets customer_information
     *
     * @param string|null $customer_information Text that can be displayed to the customer once the redemption is validated or confirmed.
     *
     * @return $this
     */
    public function setCustomerInformation($customer_information)
    {
        $this->container['customer_information'] = $customer_information;

        return $this;
    }

    /**
     * Gets max_total_budget
     *
     * @return float|null
     */
    public function getMaxTotalBudget()
    {
        return $this->container['max_total_budget'];
    }

    /**
     * Sets max_total_budget
     *
     * @param float|null $max_total_budget The budget available for all discount campaigns grouped by this campaign.
     *
     * @return $this
     */
    public function setMaxTotalBudget($max_total_budget)
    {
        $this->container['max_total_budget'] = $max_total_budget;

        return $this;
    }

    /**
     * Gets max_redemptions
     *
     * @return float|null
     */
    public function getMaxRedemptions()
    {
        return $this->container['max_redemptions'];
    }

    /**
     * Sets max_redemptions
     *
     * @param float|null $max_redemptions The maximum number of redemptions available across all discount campaigns grouped by this campaign.
     *
     * @return $this
     */
    public function setMaxRedemptions($max_redemptions)
    {
        $this->container['max_redemptions'] = $max_redemptions;

        return $this;
    }

    /**
     * Gets minimum_value
     *
     * @return float|null
     */
    public function getMinimumValue()
    {
        return $this->container['minimum_value'];
    }

    /**
     * Sets minimum_value
     *
     * @param float|null $minimum_value minimum_value
     *
     * @return $this
     */
    public function setMinimumValue($minimum_value)
    {
        $this->container['minimum_value'] = $minimum_value;

        return $this;
    }

    /**
     * Gets maximum_value
     *
     * @return float|null
     */
    public function getMaximumValue()
    {
        return $this->container['maximum_value'];
    }

    /**
     * Sets maximum_value
     *
     * @param float|null $maximum_value maximum_value
     *
     * @return $this
     */
    public function setMaximumValue($maximum_value)
    {
        $this->container['maximum_value'] = $maximum_value;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency denominating monetary values in this campaign (USD, GBP, EUR, AUD)
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_symbol
     *
     * @return string|null
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     *
     * @param string|null $currency_symbol Currency symbol ($, £, €)
     *
     * @return $this
     */
    public function setCurrencySymbol($currency_symbol)
    {
        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string|null $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string|null
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string|null $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets budget_code
     *
     * @return string|null
     */
    public function getBudgetCode()
    {
        return $this->container['budget_code'];
    }

    /**
     * Sets budget_code
     *
     * @param string|null $budget_code budget_code
     *
     * @return $this
     */
    public function setBudgetCode($budget_code)
    {
        $this->container['budget_code'] = $budget_code;

        return $this;
    }

    /**
     * Gets medium
     *
     * @return string|null
     */
    public function getMedium()
    {
        return $this->container['medium'];
    }

    /**
     * Sets medium
     *
     * @param string|null $medium medium
     *
     * @return $this
     */
    public function setMedium($medium)
    {
        $this->container['medium'] = $medium;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string|null $voucher_type Determines what type of vouchers can be generated for campaign. Generic vouchers (eg. SALE10) can be redeemed multiple times. Unique vouchers allow for greater control and better tracking of who and how is using your promotions.
     *
     * @return $this
     */
    public function setVoucherType($voucher_type)
    {
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($voucher_type) && !in_array($voucher_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets voucher_code_type
     *
     * @return string|null
     */
    public function getVoucherCodeType()
    {
        return $this->container['voucher_code_type'];
    }

    /**
     * Sets voucher_code_type
     *
     * @param string|null $voucher_code_type What characters should the code include when new voucher is created. Possible choices are digits, letters, and mixed.
     *
     * @return $this
     */
    public function setVoucherCodeType($voucher_code_type)
    {
        $allowedValues = $this->getVoucherCodeTypeAllowableValues();
        if (!is_null($voucher_code_type) && !in_array($voucher_code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_code_type'] = $voucher_code_type;

        return $this;
    }

    /**
     * Gets voucher_random_part_length
     *
     * @return float|null
     */
    public function getVoucherRandomPartLength()
    {
        return $this->container['voucher_random_part_length'];
    }

    /**
     * Sets voucher_random_part_length
     *
     * @param float|null $voucher_random_part_length How long should the random part of the code be? Valid values are between 2 and 10, depending on batch size.
     *
     * @return $this
     */
    public function setVoucherRandomPartLength($voucher_random_part_length)
    {

        if (!is_null($voucher_random_part_length) && ($voucher_random_part_length > 10)) {
            throw new \InvalidArgumentException('invalid value for $voucher_random_part_length when calling Campaign., must be smaller than or equal to 10.');
        }
        if (!is_null($voucher_random_part_length) && ($voucher_random_part_length < 3)) {
            throw new \InvalidArgumentException('invalid value for $voucher_random_part_length when calling Campaign., must be bigger than or equal to 3.');
        }

        $this->container['voucher_random_part_length'] = $voucher_random_part_length;

        return $this;
    }

    /**
     * Gets voucher_prefix
     *
     * @return string|null
     */
    public function getVoucherPrefix()
    {
        return $this->container['voucher_prefix'];
    }

    /**
     * Sets voucher_prefix
     *
     * @param string|null $voucher_prefix A prefix that will be used to generate vouchers. Needs to be unique within project.
     *
     * @return $this
     */
    public function setVoucherPrefix($voucher_prefix)
    {
        $this->container['voucher_prefix'] = $voucher_prefix;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


