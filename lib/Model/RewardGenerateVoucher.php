<?php
/**
 * RewardGenerateVoucher
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Vouchery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Vouchery\Model;

use \ArrayAccess;
use \Vouchery\ObjectSerializer;

/**
 * RewardGenerateVoucher Class Doc Comment
 *
 * @category Class
 * @package  Vouchery
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RewardGenerateVoucher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RewardGenerateVoucher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'title' => 'string',
        'description' => 'string',
        'prefix' => 'string',
        'code_type' => 'string',
        'random_part_length' => 'float',
        'voucher_campaign_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'title' => null,
        'description' => null,
        'prefix' => null,
        'code_type' => null,
        'random_part_length' => null,
        'voucher_campaign_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'title' => 'title',
        'description' => 'description',
        'prefix' => 'prefix',
        'code_type' => 'code_type',
        'random_part_length' => 'random_part_length',
        'voucher_campaign_id' => 'voucher_campaign_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'prefix' => 'setPrefix',
        'code_type' => 'setCodeType',
        'random_part_length' => 'setRandomPartLength',
        'voucher_campaign_id' => 'setVoucherCampaignId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'prefix' => 'getPrefix',
        'code_type' => 'getCodeType',
        'random_part_length' => 'getRandomPartLength',
        'voucher_campaign_id' => 'getVoucherCampaignId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_GENERATE_VOUCHER = 'GenerateVoucher';
    const CODE_TYPE_MIXED = 'mixed';
    const CODE_TYPE_DIGITS = 'digits';
    const CODE_TYPE_LETTERS = 'letters';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GENERATE_VOUCHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeTypeAllowableValues()
    {
        return [
            self::CODE_TYPE_MIXED,
            self::CODE_TYPE_DIGITS,
            self::CODE_TYPE_LETTERS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['code_type'] = isset($data['code_type']) ? $data['code_type'] : null;
        $this->container['random_part_length'] = isset($data['random_part_length']) ? $data['random_part_length'] : null;
        $this->container['voucher_campaign_id'] = isset($data['voucher_campaign_id']) ? $data['voucher_campaign_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['prefix'] === null) {
            $invalidProperties[] = "'prefix' can't be null";
        }
        if ($this->container['code_type'] === null) {
            $invalidProperties[] = "'code_type' can't be null";
        }
        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!is_null($this->container['code_type']) && !in_array($this->container['code_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['random_part_length']) && ($this->container['random_part_length'] > 10)) {
            $invalidProperties[] = "invalid value for 'random_part_length', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['random_part_length']) && ($this->container['random_part_length'] < 3)) {
            $invalidProperties[] = "invalid value for 'random_part_length', must be bigger than or equal to 3.";
        }

        if ($this->container['voucher_campaign_id'] === null) {
            $invalidProperties[] = "'voucher_campaign_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string $prefix A prefix in all generated vouchers. Needs to be unique within a project.
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets code_type
     *
     * @return string
     */
    public function getCodeType()
    {
        return $this->container['code_type'];
    }

    /**
     * Sets code_type
     *
     * @param string $code_type What characters should the code include. Possible choices are digits, letters, and mixed.
     *
     * @return $this
     */
    public function setCodeType($code_type)
    {
        $allowedValues = $this->getCodeTypeAllowableValues();
        if (!in_array($code_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code_type'] = $code_type;

        return $this;
    }

    /**
     * Gets random_part_length
     *
     * @return float|null
     */
    public function getRandomPartLength()
    {
        return $this->container['random_part_length'];
    }

    /**
     * Sets random_part_length
     *
     * @param float|null $random_part_length How long should the random part of the code be? Valid values are between 2 and 10.
     *
     * @return $this
     */
    public function setRandomPartLength($random_part_length)
    {

        if (!is_null($random_part_length) && ($random_part_length > 10)) {
            throw new \InvalidArgumentException('invalid value for $random_part_length when calling RewardGenerateVoucher., must be smaller than or equal to 10.');
        }
        if (!is_null($random_part_length) && ($random_part_length < 3)) {
            throw new \InvalidArgumentException('invalid value for $random_part_length when calling RewardGenerateVoucher., must be bigger than or equal to 3.');
        }

        $this->container['random_part_length'] = $random_part_length;

        return $this;
    }

    /**
     * Gets voucher_campaign_id
     *
     * @return float
     */
    public function getVoucherCampaignId()
    {
        return $this->container['voucher_campaign_id'];
    }

    /**
     * Sets voucher_campaign_id
     *
     * @param float $voucher_campaign_id Subcampaign ID, new voucher will be related to.
     *
     * @return $this
     */
    public function setVoucherCampaignId($voucher_campaign_id)
    {
        $this->container['voucher_campaign_id'] = $voucher_campaign_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


